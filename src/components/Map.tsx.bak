import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';

import './Map.css';
import MapSVG from "../data/map.svg"

const Map: React.FC = () => {
    const objectRef = useRef<HTMLObjectElement>(null);

    function getCoords(elem: Element | null) {
        if (!elem) return;
        let box = elem.getBoundingClientRect();

        return {
            top: box.top + window.pageYOffset,
            right: box.right + window.pageXOffset,
            bottom: box.bottom + window.pageYOffset,
            left: box.left + window.pageXOffset
        };
    }

    useEffect(() => {
        const object = objectRef.current;
        if (object) {
            object.addEventListener('load', () => {
                // create a D3 selection of the SVG itself - https://github.com/d3/d3-selection
                const obj = d3.select<HTMLObjectElement, unknown>("#map");

                // get the SVG document from the object element
                const svgDoc = obj.node()?.contentDocument;
                // create a D3 selection of the SVG element
                let svg: any;
                if (svgDoc) {
                    svg = d3.select(svgDoc.documentElement);
                }
                // create a D3 selection of the elements inside the SVG
                //const elements = svg.selectAll("rect"); // or whatever elements you want to select

                // create a D3 selection of the image element
                //const image = svg.selectChild("#image");

                // create and configure an instance of zoom behaviour - https://github.com/d3/d3-zoom
                const zoom = d3.zoom().on("zoom", zoomed);

                // apply configured zoom behaviour to our svg
                svg.call(zoom);

                // function zoomed(event: any) {
                //     const { transform } = event;
                //     let aaa = getCoords(document.getElementById("map"));
                //     if (!aaa) return;
                //     // apply calculated transform to the image
                //     console.log(transform);
                //     console.log(aaa);
                //     //svg.attr("transform", transform.toString());
                //     svg.attr("transform", `translate(${transform.x},${transform.y}) scale(${transform.k})`);
                //     // translate(-0.5995817575833389,19.191148578072983) scale(0.8705505632961247)
                // }

                function zoomed(event: any) {
                    const { transform } = event;
                    const obj: HTMLObjectElement | null = document.getElementById("map") as HTMLObjectElement;
                    const svgDoc = obj?.contentDocument;
                    const svgRoot: SVGSVGElement | null = svgDoc?.documentElement as any as SVGSVGElement;
                    if (!svgRoot) return;
                    const screenCTM = svgRoot.getScreenCTM()?.inverse();
                    const mousePos = d3.pointer(event);
                    const point: SVGPoint = svgRoot.createSVGPoint();
                    point.x = mousePos[0];
                    point.y = mousePos[1];
                    const svgPos: DOMPoint = point.matrixTransform(screenCTM);

                    svg.attr("transform", `translate(${svgPos?.x},${svgPos?.y}) scale(${transform.k})`);
                }
            });
        }
    }, []);

    // // create a D3 selection of the SVG itself - https://github.com/d3/d3-selection
    // const svg = d3.select<Element, unknown>("#map");
    // //create a D3 selection of the image element
    // const image = svg.selectChild("#image");

    // // create and configure an instance of zoom behaviour - https://github.com/d3/d3-zoom
    // const zoom = d3.zoom().on("zoom", zoomed);

    // // apply configured zoom behaviour to our svg
    // svg.call(zoom);

    // function zoomed(event: any) {
    //     const { transform } = event;
    //     console.log(transform);
    //     // apply calculated transform to the image
    //     image.attr("transform", transform.toString());
    // }

    return (
        <div id="container">
            {/* <strong>{name}</strong>
        <p>Explore <a target="_blank" rel="noopener noreferrer" href="https://ionicframework.com/docs/components">UI Components</a></p> */}
            {/* <svg id="map" width="100%" height="100%" style={{ backgroundColor: 'red' }}>
                <image id="image" href={map} />
            </svg> */}
            <object ref={objectRef} id="map" width="100%" height="100%" data={MapSVG} type="image/svg+xml"></object>
        </div>
    );
};

export default Map;